{"name":"WebinoImageThumb","tagline":"Image Thumbnailer for Zend Framework 2","body":"# Image Thumbnailer <br /> for Zend Framework 2\r\n\r\n[![Build Status](https://secure.travis-ci.org/webino/WebinoImageThumb.png?branch=develop)](http://travis-ci.org/webino/WebinoImageThumb \"Develop Build Status\")\r\n[![Coverage Status](https://coveralls.io/repos/webino/WebinoImageThumb/badge.png?branch=develop)](https://coveralls.io/r/webino/WebinoImageThumb?branch=develop \"Develop Coverage Status\")\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/webino/WebinoImageThumb/badges/quality-score.png?s=b3ef629e7e8eaafe1dd8d70128958c2718dd8579)](https://scrutinizer-ci.com/g/webino/WebinoImageThumb/ \"Quality Score\")\r\n[![Dependency Status](https://www.versioneye.com/user/projects/529f9724632bac57310000b6/badge.png)](https://www.versioneye.com/user/projects/529f9724632bac57310000b6 \"Develop Dependency Status\")\r\n<br />\r\n[![Latest Stable Version](https://poser.pugx.org/webino/webino-image-thumb/v/stable.png)](https://packagist.org/packages/webino/webino-image-thumb \"Latest Stable Version\")\r\n[![Total Downloads](https://poser.pugx.org/webino/webino-image-thumb/downloads.png)](https://packagist.org/packages/webino/webino-image-thumb \"Total Downloads\")\r\n[![Latest Unstable Version](https://poser.pugx.org/webino/webino-image-thumb/v/unstable.png)](https://packagist.org/packages/webino/webino-image-thumb \"Latest Unstable Version\")\r\n[![License](https://poser.pugx.org/webino/webino-image-thumb/license.svg)](https://packagist.org/packages/webino/webino-image-thumb)\r\n\r\nService that provides API to manipulate images.\r\n\r\nPowered by [PHPThumb](https://github.com/masterexploder/PHPThumb)\r\n\r\n## Features\r\n\r\n  - Resize, crop, pad, rotate, show and save images\r\n  - Create image reflection\r\n  - Crop whitespace\r\n  - Sharpen images\r\n\r\n## Setup\r\n\r\n  Following steps are necessary to get this module working, considering a zf2-skeleton or very similar application:\r\n\r\n  1. Run: `php composer.phar require webino/webino-image-thumb:dev-develop`\r\n  3. Add `WebinoImageThumb` to the enabled modules list\r\n\r\n## Requirements\r\n\r\n  - GD 2.0+\r\n\r\n## QuickStart\r\n\r\n  - For example add following code into the controller action, assume example image:\r\n\r\n        // We encourage to use Dependency Injection instead of Service Locator\r\n        $thumbnailer = $this->getServiceLocator()->get('WebinoImageThumb');\r\n        $imagePath   = 'public/images/example.jpg';\r\n        $thumb       = $thumbnailer->create($imagePath, $options = [], $plugins = []);\r\n\r\n        $thumb->resize(100, 100);\r\n\r\n        $thumb->show();\r\n        // or/and\r\n        $thumb->save('public/images/resized.jpg');\r\n\r\n    *NOTE: If you don't know how to inject the WebinoImageThumb into action controller, check out `test/resources`*\r\n\r\n  - Use reflection plugin:\r\n\r\n        $reflection = $thumbnailer->createReflection(40, 40, 80, true, '#a4a4a4');\r\n        $thumb      = $thumbnailer->create($imagePath, [], [$reflection]);\r\n\r\n  - Use whitespace cropper plugin:\r\n\r\n        $cropper = $thumbnailer->createWhitespaceCropper();\r\n        $thumb   = $thumbnailer->create($imagePath, [], [$cropper]);\r\n\r\n  - Use sharpen plugin:\r\n\r\n        $sharpen = $thumbnailer->createSharpen();\r\n        $thumb   = $thumbnailer->create($imagePath, [], [$sharpen]);\r\n\r\n## Options\r\n\r\n The options array allows you to customize the behavior of the library a bit. Some of these options are implementation-specific, and are noted as such.  So, let's first go over what options are available to us:\r\n\r\n<table>\r\n    <tr>\r\n        <th>Option Name</th>\r\n        <th>Description</th>\r\n        <th>Default Value</th>\r\n        <th>Valid Values</th>\r\n    </tr>\r\n    <tr>\r\n        <td>resizeUp</td>\r\n        <td>Whether or not to scale an image up to the desired dimensions</td>\r\n        <td>false</td>\r\n        <td>true / false</td>\r\n    </tr>\r\n    <tr>\r\n        <td>jpegQuality</td>\r\n        <td>What quality to save jpeg files with (how much compression to use, 100 being none)</td>\r\n        <td>100</td>\r\n        <td>1-100</td>\r\n    </tr>\r\n    <tr>\r\n        <td>correctPermissions</td>\r\n        <td>Whether or not the library should attempt to correct file permissions. This will only work if you set up your PHP to allow chmod operations</td>\r\n        <td>false</td>\r\n        <td>true / false</td>\r\n    </tr>\r\n    <tr>\r\n        <td>preserveAlpha</td>\r\n        <td>Whether or not to preserve alpha transparency in PNG files</td>\r\n        <td>true</td>\r\n        <td>true / false</td>\r\n    </tr>\r\n    <tr>\r\n        <td>alphaMaskColor</td>\r\n        <td>What rgb color should be used for the alpha mask</td>\r\n        <td><code>[255, 255, 255]</code></td>\r\n        <td><code>[0-255, 0-255, 0-255]</code></td>\r\n    </tr>\r\n    <tr>\r\n        <td>preserveTransparency</td>\r\n        <td>Whether or not to preserve transparency in GIF files</td>\r\n        <td>true</td>\r\n        <td>true / false</td>\r\n    </tr>\r\n    <tr>\r\n        <td>transparencyMaskColor</td>\r\n        <td>What rgb color should be used for the transparency mask</td>\r\n        <td><code>[255, 255, 255]</code></td>\r\n        <td><code>[0-255, 0-255, 0-255]</code></td>\r\n    </tr>\r\n    <tr>\r\n        <td>interlace</td>\r\n        <td>When the interlace option equals true or false call imageinterlace</td>\r\n        <td><code>null</code></td>\r\n        <td><code>true / false</code></td>\r\n    </tr>\r\n</table>\r\n\r\n## Functions\r\n\r\n  * `adaptiveResize($width, $height)`\r\n  * `adaptiveResizePercent($width, $height, $percent = 50)`\r\n  * `adaptiveResizeQuadrant($width, $height, $quadrant = 'T|B|C|L|R')`\r\n  * `crop($startX, $startY, $cropWidth, $cropHeight)`\r\n  * `cropFromCenter($cropWidth, $cropHeight = null)`\r\n  * `pad($width, $height, $color = [255, 255, 255])`\r\n  * `resize($maxWidth, $maxHeight)`\r\n  * `resizePercent($percent)`\r\n  * `rotateImage($direction = 'CW|CCW')`\r\n  * `rotateImageNDegrees($degrees)`\r\n  * `save($fileName, $format = 'GIF|JPG|PNG')`\r\n  * `show($rawData = false)`\r\n\r\n## Getters / Setters\r\n\r\n  * `getCurrentDimensions()`\r\n  * `getFileName()`\r\n  * `getFormat()`\r\n  * `getIsRemoteImage()`\r\n  * `getMaxHeight()`\r\n  * `getMaxWidth()`\r\n  * `getNewDimensions()`\r\n  * `getOldImage()`\r\n  * `getOptions()`\r\n  * `getPercent()`\r\n  * `getWorkingImage()`\r\n  * `setCurrentDimensions($currentDimensions)`\r\n  * `setFileName($fileName)`\r\n  * `setFormat($format)`\r\n  * `setMaxHeight($maxHeight)`\r\n  * `setMaxWidth($maxWidth)`\r\n  * `setNewDimensions($newDimensions)`\r\n  * `setOldImage($oldImage)`\r\n  * `setOptions($options)`\r\n  * `setPercent($percent)`\r\n  * `setWorkingImage($workingImage)`\r\n\r\n## Reflection plugin\r\n\r\n  * `createReflection($percent, $reflection, $white, $border, $borderColor)`\r\n\r\n    * `$percent` - What percentage of the image to create the reflection from.\r\n    * `$reflection` - What percentage of the image height should the reflection height be.\r\n    * `$white` - How transparent (using white as the background) the reflection should be, as a percent.\r\n    * `$border` - Whether a border should be drawn around the original image.\r\n    * `$borderColor` - The hex value of the color you would like your border to be.\r\n\r\n## Whitespace Cropper plugin\r\n\r\n  * `createWhitespaceCropper($border, $color)`\r\n\r\n    * `$margin` - What pixels of a margin should be around the original image.\r\n    * `$color`  - The hex value of the color you would like to crop.\r\n\r\n## Changelog\r\n\r\n### 2.0.0 [UNRELEASED]\r\n\r\n  - Requires PHPThumb 2.0 via composer\r\n  - Added Whitespace Cropper plugin\r\n  - Added Sharpen plugin\r\n  - Removed ZF autoloader support\r\n\r\n### 1.0.0\r\n\r\n  - Initial release\r\n\r\n## Development\r\n\r\n[![Dependency Status](https://www.versioneye.com/user/projects/52f494f2ec1375dc7b0000cd/badge.svg?style=flat)](https://www.versioneye.com/user/projects/52f494f2ec1375dc7b0000cd)\r\n\r\nWe will appreciate any contributions on development of this module.\r\n\r\nLearn [How to develop Webino modules](https://github.com/webino/Webino/wiki/How-to-develop-Webino-module)\r\n\r\n## Addendum\r\n\r\n  Most of the documentation is taken from the [PHPThumb wiki](https://github.com/masterexploder/PHPThumb/wiki).\r\n\r\n  Please, if you are interested in this Zend Framework module report any issues and don't hesitate to contribute.\r\n\r\n[Report a bug](https://github.com/webino/WebinoImageThumb/issues) | [Fork me](https://github.com/webino/WebinoImageThumb)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}